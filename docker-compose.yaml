version: '3'

services:
    app:
        build: .
        container_name: micro-videos-app
        entrypoint: dockerize -template ./.docker/app/.env:.env -template ./.docker/app/.env.testing:.env.testing -wait tcp://db:3306 -timeout 40s ./.docker/entrypoint.sh
        environment:
            - _DB_HOST=db
            - _DB_DATABASE=code_micro_videos
            - _DB_USERNAME=root
            - _DB_PASSWORD=root
            - _TEST_DB_DATABASE=code_micro_videos_test
        volumes:
            - .:/var/www
        networks:
            - app-network
        depends_on:
            - db
            - redis

    nginx:
        build: .docker/nginx
        container_name: micro-videos-nginx
        ports:
            - "8000:80"
        volumes:
            - .:/var/www
        networks:
            - app-network
        depends_on:
            - app

    db:
        build: ./.docker/mysql
        container_name: micro-videos-db
        ports:
            - "3306:3306"
        volumes:
            - ./.docker/dbdata:/var/lib/mysql
            - ./.docker/mysql:/docker-entrypoint-initdb.d
        environment:
            - MYSQL_DATABASE=code_micro_videos
            - MYSQL_ROOT_PASSWORD=root
        networks:
            - app-network

    redis:
        image: redis:alpine
        container_name: micro-videos-redis
        expose:
            - 6379
        networks:
            - app-network

    ms-full-cicle-kafka-ui:
        image: consdata/kouncil:latest
        container_name: ms-full-cicle-kafka-ui
        ports:
            - "80:8080"
        environment:
            bootstrapServers: kafka:19092
        networks:
            - app-network
        depends_on:
            - zookeeper
            - kafka

    zookeeper:
        image: zookeeper:latest
        ports:
            - "2182:2181"
        environment:
            ZOO_MY_ID: 1
            ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181
            ZOO_4LW_COMMANDS_WHITELIST: mntr,conf,ruok
        networks:
            - app-network

    kafka:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - zookeeper
        networks:
            - app-network
        ports:
            - "9092:9092"
        environment:
            KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_BROKER_ID: 1
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    control-center:
        image: confluentinc/cp-enterprise-control-center:6.0.1
        hostname: control-center
        depends_on:
            - kafka
        ports:
            - "9021:9021"
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:19092'
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_CONNECT_CLUSTER: http://kafka-connect:8083
            PORT: 9021
        networks:
            - app-network

networks:
    app-network:
        driver: bridge
